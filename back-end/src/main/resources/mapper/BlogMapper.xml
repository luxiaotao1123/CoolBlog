<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.blog.dao.BlogMapper">
  <resultMap id="BaseResultMap" type="cn.blog.bean.Blog">
    <id column="blogId" jdbcType="INTEGER" property="blogid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="label" jdbcType="VARCHAR" property="label" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="updateTime" jdbcType="DATE" property="updatetime" />
    <result column="userId" jdbcType="INTEGER" property="userid" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="summary" jdbcType="VARCHAR" property="summary" />
    <result column="preview" jdbcType="VARCHAR" property="preview" />
    <result column="thumpreview" jdbcType="VARCHAR" property="thumpreview" />
  </resultMap>
  <resultMap id="archivesResultMap" type="cn.blog.bean.Archive">
    <id column="blogId" jdbcType="INTEGER" property="blogid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="updateTime" jdbcType="DATE" property="updatetime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    blogId, title, label, content, updateTime, userId, status, summary, preview, thumpreview
  </sql>
  <select id="selectByExample" parameterType="cn.blog.bean.BlogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from blog
    where blogId = #{blogid,jdbcType=INTEGER}
  </select>
  <insert id="insert" parameterType="cn.blog.bean.Blog">
    insert into blog (blogId, title, label, 
      content, updateTime, userId, 
      status, summary, preview, thumpreview)
    values (#{blogid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{label,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{updatetime,jdbcType=DATE}, #{userid,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{summary,jdbcType=VARCHAR}, #{preview,jdbcType=VARCHAR},#{thumpreview,jdbcType=VARCHAR})
  </insert>
  <select id="queryByblogId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM blog
    WHERE blogId=#{blogId}
  </select>
  <update id="updateByBlog" parameterType="cn.blog.bean.Blog">
    UPDATE blog
    SET title=#{title},
    label=#{label},
    content=#{content},
    updateTime=#{updatetime},
    userId=#{userid},
    summary=#{summary},
    preview=#{preview},
    thumpreview=#{thumpreview}
    WHERE blogId=#{blogid}
  </update>
  <select id="selectBlogsByLabel" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM blog
    WHERE label like #{label} AND status=1
  </select>
  <update id="updateStatus" parameterType="Integer[]">
    UPDATE blog
    SET status=0
    <where>
      blogId
      <foreach collection="array" item="ids" open="in (" close=")" separator=",">
        #{ids}
      </foreach>
    </where>
  </update>
  <select id="getDustbinBlogs" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    FROM blog
    WHERE status=0
  </select>
  <delete id="deleteDustbinBlogs" parameterType="Integer[]">
    DELETE FROM blog
    <where>
      blogId
      <foreach collection="array" item="ids" open="in (" close=")" separator=",">
        #{ids}
      </foreach>
    </where>
  </delete>
  <select id="getAllBlog" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog
    WHERE status=1 ORDER BY updateTime DESC
  </select>
  <select id="queryYears" resultType="java.lang.String">
      SELECT DISTINCT LEFT(updateTime,4) FROM blog WHERE STATUS=1 ORDER BY updateTime DESC
  </select>
  <select id="queryMonths" resultType="java.lang.String">
    SELECT DISTINCT LEFT(updateTime,7) FROM blog WHERE STATUS=1 ORDER BY updateTime DESC
  </select>
  <select id="queryMonthsByYear" parameterType="java.lang.String" resultType="java.lang.String">
      SELECT DISTINCT SUBSTRING(updateTime,6,2)
      FROM blog
      WHERE updateTime LIKE concat(#{year},'%') AND STATUS=1
      ORDER BY updateTime DESC
  </select>
  <select id="queryArchives" parameterType="java.lang.String" resultMap="archivesResultMap">
    SELECT blogId,title
    FROM blog
    WHERE STATUS=1 AND updateTime LIKE concat(#{month},'%')
    ORDER BY updateTime DESC
  </select>
  <select id="queryByKeywords" parameterType="java.lang.String" resultMap="BaseResultMap">
      SELECT * FROM blog WHERE content LIKE concat('%',#{keywords},'%') OR title LIKE concat('%',#{keywords},'%')
  </select>
</mapper>